# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainSuggestion.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
import firebase_admin
from firebase_admin import credentials, db
from PyQt5.QtCore import QThread
import pyttsx3
import qrcode


def initialize_firebase():
    if not firebase_admin._apps:
        cred = credentials.Certificate("keywords-e2507-firebase-adminsdk-ruto8-cc3abd39a8.json")
        firebase_admin.initialize_app(cred, {
            'databaseURL': 'https://keywords-e2507-default-rtdb.firebaseio.com/'
        })
        print("Firebase initialized successfully.")

class TTSThread(QThread):
    def __init__(self, tts_engine, text):
        super().__init__()
        self.tts_engine = tts_engine
        self.text = text

    def run(self):
        self.tts_engine.say(self.text)
        self.tts_engine.runAndWait()

class Ui_MainSuggestion(object):
    def setupUi(self, MainSuggestion, keyword):
        self.tts_engine = pyttsx3.init()
        rate = self.tts_engine.getProperty('rate')
        self.tts_engine.setProperty('rate', 170)
        self.is_speaking = False
        self.tts_thread = None
        MainSuggestion.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.descripText = ""
        MainSuggestion.setObjectName("MainSuggestion")
        MainSuggestion.resize(800, 480)
        MainSuggestion.setStyleSheet("background-color: rgb(136, 202, 94);")
        self.centralwidget = QtWidgets.QWidget(MainSuggestion)
        self.centralwidget.setObjectName("centralwidget")
        self.back_Button = QtWidgets.QPushButton(self.centralwidget)
        self.back_Button.setGeometry(QtCore.QRect(10, 20, 121, 31))
        self.back_Button.setStyleSheet("font: 75 12pt \"MS Sans Serif\";\n"
"border-radius: 10px; \n"
"background-color: rgb(255, 255, 255);\n"
"color: rgb(136, 202, 94);")
        self.back_Button.setObjectName("back_Button")
        self.back_Button.clicked.connect(self.BackToStartScreen)

        self.exit_Button = QtWidgets.QPushButton(self.centralwidget)
        self.exit_Button.setGeometry(QtCore.QRect(670, 20, 121, 31))
        self.exit_Button.setStyleSheet("font: 75 12pt \"MS Sans Serif\";\n"
"border-radius: 10px; \n"
"background-color: rgb(255, 255, 255);\n"
"color: rgb(136, 202, 94);")
        self.exit_Button.setObjectName("exit_Button")
    
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(70, 130, 650, 81))
        self.frame.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")

        self.availableText = QtWidgets.QLabel(self.frame)
        self.availableText.setGeometry(QtCore.QRect(10, 20, 650, 16))
        self.availableText.setStyleSheet("font: 75 11pt \"MS Sans Serif\";\n"
"color: rgb(0, 0, 0);")
        self.availableText.setObjectName("availableText")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(240, 30, 421, 71))
        self.label.setStyleSheet("color: rgb(241, 192, 185);\n"
"font: 50 20pt \"MS Sans Serif\";")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(290, 90, 281, 31))
        self.label_2.setStyleSheet("font: 75 12pt \"MS Sans Serif\";\n"
"color: rgb(255, 255, 255);")
        self.label_2.setObjectName("label_2")
        self.unavailableText = QtWidgets.QLabel(self.frame)
        self.unavailableText.setGeometry(QtCore.QRect(10, 50, 650, 21))
        self.unavailableText.setStyleSheet("font: 75 11pt \"MS Sans Serif\";\n"
"color: rgb(0, 0, 0);")
        self.unavailableText.setObjectName("unavailableText")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(330, 220, 201, 31))
        self.label_5.setStyleSheet("font: 75 12pt \"MS Sans Serif\";\n"
"color: rgb(255, 255, 255);")
        self.label_5.setObjectName("label_5")

        # Create a scroll area
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(70, 260, 421, 151))
        self.scrollArea.setWidgetResizable(True)
        

        self.label1 = QtWidgets.QLabel(self.centralwidget)
        self.label1.setGeometry(QtCore.QRect(70, 260, 421, 151))
        self.label1.setStyleSheet("font: 75 11pt \"MS Sans Serif\";\n"
"background-color: rgb(255, 255, 255);\n"
"color: rgb(0, 0, 0);\n"
"text-indent: 20px;")
        self.label1.setObjectName("label1")
        self.label1.setWordWrap(True)
        self.scrollArea.setWidget(self.label1)

        # Create a scroll area
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(500, 370, 221, 41))
        self.scrollArea.setWidgetResizable(True)

        self.linkText = QtWidgets.QLabel(self.centralwidget)
        self.linkText.setGeometry(QtCore.QRect(500, 370, 221, 41))
        self.linkText.setStyleSheet("font: 75 9pt \"MS Sans Serif\";\n"
                            "background-color: rgb(255, 255, 255);\n"
                            "color: rgb(51, 153, 255);\n"  # Light blue color
                            "text-indent: 20px;")
        
        
        self.linkText.setObjectName("linkText")
        self.linkText.setWordWrap(True)  # Enable word wrap for the label
        self.scrollArea.setWidget(self.linkText)

        self.refQr = QtWidgets.QLabel(self.centralwidget)
        self.refQr.setGeometry(QtCore.QRect(500, 260, 221, 101))
        self.refQr.setObjectName("refQr")
        

        self.exit_Button_2 = QtWidgets.QPushButton(self.centralwidget)
        self.exit_Button_2.setGeometry(QtCore.QRect(330, 430, 171, 31))
        self.exit_Button_2.setStyleSheet("font: 75 12pt \"MS Sans Serif\";\n"
"border-radius: 10px; \n"
"background-color: rgb(255, 255, 255);\n"
"color: rgb(136, 202, 94);")
        self.exit_Button_2.setObjectName("exit_Button_2")
        self.generateQRCode()

        

        self.frame.raise_()
        self.back_Button.raise_()
        self.exit_Button.raise_()
        self.label.raise_()
        self.label_2.raise_()
        self.label_5.raise_()
        self.label1.raise_()
        # self.linkText.raise_()
        self.exit_Button_2.raise_()

        MainSuggestion.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainSuggestion)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")
        MainSuggestion.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainSuggestion)
        self.statusbar.setObjectName("statusbar")
        MainSuggestion.setStatusBar(self.statusbar)

        self.retranslateUi(MainSuggestion)
        QtCore.QMetaObject.connectSlotsByName(MainSuggestion)
        # Initialize keyword
        self.keyword = keyword
        # Display fetched data
        self.display_description()
        self.display_available()
        self.display_unavailable()
        self.display_source_link()

    def generateQRCode(self):
    # Generate QR code
        qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=10, border=4)
        qr.add_data(str(self.descripText))
        qr.make(fit=True)

        # Create image
        qr_img = qr.make_image(fill_color="black", back_color="white")

        # Convert to bytes
        image_byte_array = QtCore.QByteArray()
        buffer = QtCore.QBuffer(image_byte_array)
        buffer.open(QtCore.QIODevice.WriteOnly)
        qr_img.save(buffer, "PNG")
        # Convert to QImage
        image = QtGui.QImage.fromData(image_byte_array)
        pixmap = QtGui.QPixmap.fromImage(image).scaled(self.refQr.size(), QtCore.Qt.KeepAspectRatio)
        # Display in QLabel
        self.refQr.setPixmap(pixmap)

    def BackToStartScreen(self):
        self.stop_tts()
        from StartScreen import Ui_StartScreen
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_StartScreen()
        self.ui.setupUi(self.window)
        self.window.showFullScreen()
        self.centralwidget.window().close()

    def retranslateUi(self, MainSuggestion):
        _translate = QtCore.QCoreApplication.translate
        MainSuggestion.setWindowTitle(_translate("MainSuggestion", "MainSuggestion"))
        self.back_Button.setText(_translate("MainSuggestion", "Back"))
        self.exit_Button.setText(_translate("MainSuggestion", "Talk"))
        self.exit_Button.clicked.connect(self.read_description)
        self.label.setText(_translate("MainSuggestion", "Suggestions Found"))
        self.label_2.setText(_translate("MainSuggestion", "Medicines you can take"))
        self.label_5.setText(_translate("MainSuggestion", "Information on..."))
        self.label1.setText(_translate("MainSuggestion", "Information"))
        self.exit_Button_2.setText(_translate("MainSuggestion", "Purchase"))
        self.exit_Button_2.clicked.connect(self.ProceedToPurchase)
        self.unavailableText.setText(_translate("MainSuggestion", "Unavailable:"))
        self.availableText.setText(_translate("MainSuggestion", "Available:"))
        
    def read_description(self):
        if not self.is_speaking:
            self.is_speaking = True
        # Start TTS in a new thread
        self.tts_thread = TTSThread(self.tts_engine, self.label1.text())
        self.tts_thread.start()

    def _read_description(self):
        
        self.tts_engine.say(self.label1.text())
        self.tts_engine.runAndWait()
        self.is_speaking = False 
    
    # def stop_tts(self):
    #     if self.is_speaking:
    #         self.tts_engine.stop()
    #         self.is_speaking = False

    def stop_tts(self):
        if self.tts_thread and self.tts_thread.isRunning():
            self.tts_thread.terminate()
            self.tts_thread.wait()
            self.is_speaking = False

    def display_description(self):
        # Fetch description from Firebase Realtime Database using self.keyword
        description = self.fetch_data_from_firestore("description")
        

        if description:
            self.label1.setText(description.replace("<br>", "\n"))
        else:
            self.label1.setText("No information available for the entered symptoms.")

    def display_available(self):
        # Fetch available medications from Firebase Realtime Database using self.keyword
        available = self.fetch_data_from_firestore("available")

        if available:
            self.availableText.setText("Available: " + available)
        else:
            self.availableText.setText("No available medications information.")

    def display_unavailable(self):
        # Fetch unavailable medications from Firebase Realtime Database using self.keyword
        unavailable = self.fetch_data_from_firestore("unavailable")

        if unavailable:
            self.unavailableText.setText("Unavailable: " + unavailable)
        else:
            self.unavailableText.setText("No unavailable medications information.")

    def display_source_link(self):
        # Fetch source link from Firebase Realtime Database using self.keyword
        source_link = self.fetch_data_from_firestore("sourcelink")
        self.descripText = source_link
        print(self.descripText)

        if source_link:
            self.linkText.setText("Link: " + source_link)
        else:
            self.linkText.setText("No source link available.")
    
    def fetch_data_from_firestore(self, field):
        ref = db.reference("Keywords")
        result = ref.order_by_child("keyword").equal_to(self.keyword).get()

        if result:
            for key, value in result.items():
                if field in value:
                    return value[field]

        return None
    
    def ProceedToPurchase(self):
        initialize_firebase()
        from Purchase import Ui_Purchase
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_Purchase()
        self.ui.setupUi(self.window)
        self.window.showFullScreen()
        self.centralwidget.window().close()



if __name__ == "_main_":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainSuggestion = QtWidgets.QMainWindow()
    ui = Ui_MainSuggestion()
    ui.setupUi(MainSuggestion)
    MainSuggestion.show()
    sys.exit(app.exec_())